
    public function store(Request $request)
    {
        try{

            $validator = Validator::make($request->all(), [
                'pnr' => 'required|string|max:255',
                'hotel_ref' => 'nullable|string|max:255',
                'cruise_ref' => 'nullable|string|max:255',
                'name' => 'required|string|max:255',
                'phone' => 'required|string|max:20',
                'email' => 'required|email|max:255',
                'query_type' => 'nullable|string|max:255',
                'selected_company' => 'required|string|max:255',
                'booking_status_id' => 'required',
                'payment_status_id' => 'required',
                'reservation_source' => 'nullable|string|max:255',
                'descriptor' => 'nullable|string|max:255',
                'amadeus_sabre_pnr' => 'nullable|string|max:255',
                'sector_details.*' => 'required|file|image|max:2048',
                'passenger' => 'required|array|min:1',
                'passenger.*.passenger_type' => 'required|string|in:Adult,Child,Infant,Seat Infant,Lap Infant',
                'passenger.*.gender' => 'required|string|in:Male,Female,Other',
                'passenger.*.title' => 'nullable|string|in:Mr,Ms,Mrs,Dr',
                'passenger.*.first_name' => 'required|string',
                'passenger.*.middle_name' => 'nullable|string',
                'passenger.*.last_name' => 'required|string',
                'passenger.*.dob' => 'required|date|before:today',
                'passenger.*.seat_number' => 'nullable|string',
                'passenger.*.credit_note' => 'nullable|numeric',
                'passenger.*.e_ticket_number' => 'nullable|string',
                'billing' => 'required|array|min:1',
                'billing.*.card_type' => 'required|string|in:VISA,MasterCard,AMEX,Discover',
                'billing.*.cc_number' => 'required|digits_between:13,19',
                'billing.*.cc_holder_name' => 'required|string',
                'billing.*.exp_month' => 'required|digits:2',
                'billing.*.exp_year' => 'required|digits:4',
                'billing.*.cvv' => 'required|digits_between:3,4',
                'billing.*.address' => 'required|string',
                'billing.*.email' => 'required|email',
                'billing.*.contact_no' => 'required|digits_between:8,15',
                'billing.*.city' => 'required|string',
                'billing.*.country' => 'required|string',
                'billing.*.state' => 'nullable|string',
                'billing.*.zip_code' => 'required|string',
                'billing.*.currency' => 'required|string|size:3',
                'billing.*.amount' => 'required|numeric|min:1',
                'pricing' => 'required|array|min:1',
                'pricing.*.passenger_type' => 'required|string|in:adult,child,infant_on_lap,infant_on_seat',
                'pricing.*.num_passengers' => 'required|integer|min:1',
                'pricing.*.gross_price' => 'required|numeric|min:0',
                'pricing.*.net_price' => 'required|numeric|min:0',
                'pricing.*.details' => 'required|string',
            ],
                [
                'passenger.required' => 'Please provide at least one passenger.',
                'passenger.*.passenger_type.required' => 'Passenger type is required.',
                'passenger.*.passenger_type.in' => 'Passenger type must be Adult, Child, Infant, Lap Infant, Seat Infant.',
                'passenger.*.gender.required' => 'Passenger Gender is required.',
                'passenger.*.gender.in' => 'Passenger Gender must be Male, Female, or Other.',
                'passenger.*.title.required' => 'Passenger Title is required (e.g., Mr, Ms, Mrs, Dr).',
                'passenger.*.title.in' => 'Passenger Title must be one of: Mr, Ms, Mrs, Dr.',
                'passenger.*.first_name.required' => 'Passenger First name is required.',
                'passenger.*.last_name.required' => 'Passenger Last name is required.',
                'passenger.*.dob.required' => 'Passenger Date of birth is required.',
                'passenger.*.dob.date' => 'Passenger Date of birth must be a valid date.',
                'passenger.*.dob.before' => 'Passenger Date of birth must be a past date.',
                'passenger.*.credit_note.numeric' => 'Passenger Credit note must be a number.',
                'billing.required' => 'Please provide at least one billing entry.',
                'billing.*.card_type.required' => 'Billing Card type is required.',
                'billing.*.card_type.in' => 'Billing Card type must be one of: VISA, MasterCard, AMEX, Discover.',
                'billing.*.cc_number.required' => 'Billing Card number is required.',
                'billing.*.cc_number.digits_between' => 'Billing Card number must be between 13 and 19 digits.',
                'billing.*.cc_holder_name.required' => 'Billing Card holder name is required.',
                'billing.*.exp_month.required' => 'Billing Expiration month is required.',
                'billing.*.exp_month.digits' => 'Billing Expiration month must be 2 digits.',
                'billing.*.exp_year.required' => 'Billing Expiration year is required.',
                'billing.*.exp_year.digits' => 'Billing Expiration year must be 4 digits.',
                'billing.*.cvv.required' => 'Billing CVV is required.',
                'billing.*.cvv.digits_between' => 'Billing CVV must be 3 or 4 digits.',
                'billing.*.address.required' => 'Billing address is required.',
                'billing.*.email.required' => 'Billing email is required.',
                'billing.*.email.email' => 'Billing email must be a valid email address.',
                'billing.*.contact_no.required' => 'Billing Contact number is required.',
                'billing.*.contact_no.digits_between' => 'Billing Contact number must be between 8 and 15 digits.',
                'billing.*.city.required' => 'Billing City is required.',
                'billing.*.country.required' => 'Billing Country is required.',
                'billing.*.zip_code.required' => 'Billing Zip code is required.',
                'billing.*.currency.required' => 'Billing Currency is required.',
                'billing.*.currency.size' => 'Billing Currency must be a 3-letter code (e.g., USD, EUR).',
                'billing.*.amount.required' => 'Billing Amount is required.',
                'billing.*.amount.numeric' => 'Billing Amount must be a valid number.',
                'billing.*.amount.min' => 'Billing Amount must be at least 1.',
                'pricing.required' => 'Please provide at least one pricing entry.',
                'pricing.*.passenger_type.required' => 'Pricing Passenger type is required.',
                'pricing.*.passenger_type.in' => 'Pricing Passenger type must be one of: adult, child, infant on lap, or infant on seat.',
                'pricing.*.num_passengers.required' => 'Pricing Number of passengers is required.',
                'pricing.*.num_passengers.integer' => 'Pricing Number of passengers must be a whole number.',
                'pricing.*.num_passengers.min' => 'Pricing Number of passengers must be at least 1.',
                'pricing.*.gross_price.required' => 'Pricing Gross price is required.',
                'pricing.*.gross_price.numeric' => 'Pricing Gross price must be a valid number.',
                'pricing.*.gross_price.min' => 'Pricing Gross price cannot be negative.',
                'pricing.*.net_price.required' => 'Pricing Net price is required.',
                'pricing.*.net_price.numeric' => 'Pricing Net price must be a valid number.',
                'pricing.*.net_price.min' => 'Pricing Net price cannot be negative.',
                'pricing.*.details.required' => 'Pricing Details field is required.',
            ]);


            // Custom AMEX/non-AMEX card number & CVV validation
                $validator->after(function ($validator) use ($request) {
                    $billings = $request->input('billing', []);

                    foreach ($billings as $index => $billing) {
                        $cardType = strtoupper($billing['card_type'] ?? '');
                        $ccNumber = preg_replace('/\D/', '', $billing['cc_number'] ?? '');
                        $cvv = preg_replace('/\D/', '', $billing['cvv'] ?? '');

                        if ($cardType === 'AMEX') {
                            if (strlen($ccNumber) !== 15) {
                                $validator->errors()->add("billing.$index.cc_number", 'AMEX card number must be exactly 15 digits.');
                            }
                            if (strlen($cvv) !== 4) {
                                $validator->errors()->add("billing.$index.cvv", 'AMEX CVV must be exactly 4 digits.');
                            }
                        } else {
                            if (strlen($ccNumber) !== 16) {
                                $validator->errors()->add("billing.$index.cc_number", 'Card number must be exactly 16 digits for non-AMEX.');
                            }
                            if (strlen($cvv) !== 3) {
                                $validator->errors()->add("billing.$index.cvv", 'CVV must be exactly 3 digits for non-AMEX.');
                            }
                        }
                    }
                });

        // Trigger validation (throws ValidationException on failure)
       $validator->validate();


            if ($request->hasFile('sector_details')) {
                foreach ($request->file('sector_details') as $file) {
                    $fileName = time() . '_' . uniqid() . '.' . $file->getClientOriginalExtension();
                    $file->move(public_path('uploads/sector_details'), $fileName);
                }
            }


            // try {
            DB::beginTransaction();

            // Create Travel Booking
            $bookingData = $request->only([
                'pnr',
                'campaign',
                'hotel_ref',
                'cruise_ref',
                'car_ref',
                'train_ref',
                'airlinepnr',
                'name',
                'phone',
                'email',
                'query_type',
                'selected_company',
                'booking_status',
                'payment_status',
                'reservation_source',
                'descriptor',
                'amadeus_sabre_pnr',
            ]);

            $currentShift = UserShiftAssignment::where('user_id', auth()->id())
            ->whereDate('effective_from', '<=', Carbon::now())
            ->where(function ($q) {
                $q->whereNull('effective_to')->orWhere('effective_to', '>=', Carbon::now());
            })
            ->orderByDesc('effective_from')
            ->first();

            $campaign = substr(strtoupper($request->input('campaign')), 0, 3);
            $bookingData['pnr'] = $campaign . $request->input('pnr');
            $bookingData['user_id'] = auth()->id();
            $bookingData['shift_id'] =  $currentShift?->shift_id;
            $booking = TravelBooking::create($bookingData);

            if(isset($fileName)){
                TravelSectorDetail::create([
                    'booking_id' => $booking->id,
                    'sector_type' => $fileName,
                ]);
            }

            // Create Booking Types
            foreach ($request->input('booking-type', []) as $type) {
                TravelBookingType::create([
                    'booking_id' => $booking->id,
                    'type' => $type,
                ]);
            }

           


            foreach ($data['flight'] ?? [] as $flight) {
                // Check if all fields in $flight are empty
                if ($this->allFieldsEmpty($flight)) {
                    continue; // Skip this iteration if all fields are empty
                }

                $flight['booking_id'] = $booking->id;
                TravelFlightDetail::create($flight);
            }

            // Save flight details
            foreach ($request->input('flight', []) as $flightData) {
                $flightData['booking_id'] = $booking->id;
                TravelFlightDetail::create($flightData);
            }

            // Save car details
            foreach ($request->input('car', []) as $carData) {
                $carData['booking_id'] = $booking->id;
                TravelCarDetail::create($carData);
            }

            // Save cruise details
            foreach ($request->input('cruise', []) as $cruiseData) {
                $cruiseData['booking_id'] = $booking->id;
                TravelCruiseDetail::create($cruiseData);
            }

            // Save hotel details
            foreach ($request->input('hotel', []) as $hotelData) {
                $hotelData['booking_id'] = $booking->id;
                TravelHotelDetail::create($hotelData);
            }

            // Save billing details
            foreach ($request->input('billing', []) as $billingData) {
                $billingData['booking_id'] = $booking->id;
                TravelBillingDetail::create($billingData);
            }

            // Create Passengers
            foreach ($request->input('passenger', []) as $passengerData) {
                $passengerData['booking_id'] = $booking->id;
                TravelPassenger::create($passengerData);
            }
            foreach ($request->input('train', []) as $trainData) {
                $trainData['booking_id'] = $booking->id;
                TravelTrainDetail::create($trainData);
            }

            // Create Billing Details
            foreach ($request->input('billing', []) as $billingData) {
                $billingData['booking_id'] = $booking->id;
                TravelBillingDetail::create($billingData);
            }

            // Create Pricing Detail
//            $pricingData = $request->only([
//                'hotel_cost',
//                'cruise_cost',
//                'total_amount',
//                'advisor_mco',
//                'conversion_charge',
//                'airline_commission',
//                'final_amount',
//                'merchant',
//                'net_mco',
//                'passenger_type',
//                'num_passengers',
//                'gross_price',
//                'net_price',
//                'details'
//            ]);
            foreach ($request->pricing as $pricingData) {
                $pricingData['booking_id'] = $booking->id;
                TravelPricingDetail::create($pricingData);
            }


            // Create Booking Remark (if provided)
            if ($request->filled('particulars')) {
                TravelBookingRemark::create([
                    'booking_id' => $booking->id,
                    'agent' => 'Testagent', // Default or from request if provided
                    'date_time' => now(),
                    'particulars' => $request->input('particulars'),
                ]);
            }

            // Create Quality Feedback (if provided)
            if ($request->filled('feedback')) {
                TravelQualityFeedback::create([
                    'booking_id' => $booking->id,
                    'qa' => 'Test QA', // Default or from request if provided
                    'date_time' => now(),
                    'feedback' => $request->input('feedback'),
                ]);
            }

            // Create Screenshot (if provided)
            if ($request->filled('type')) {
                TravelScreenshot::create([
                    'booking_id' => $booking->id,
                    'type' => $request->input('type'),
                    'status' => $request->input('status'),
                    'notes' => $request->input('notes'),
                ]);
            }

            DB::commit();
            $hash = $this->hashids->encode($booking->id);
            $redirectTo = [
                'route' => 'booking.show',
                'id'=>$hash
            ];
            return JsonResponse::successWithData('Booking form submitted successfully.', 201,$redirectTo,'201');
        }
        catch(ValidationException $e){
            return JsonResponse::error($e->validator->errors()->first(),422,'422');
        }
        catch(QueryException $e){
            return JsonResponse::error('Failed to Query'.$e,500,'500');
        }
        catch(\Exception $e){
            return JsonResponse::error('Internal Server Error',500,'500');
        }

        // } catch (\Exception $e) {
        //     DB::rollBack();
        //     return redirect()->route('travel.bookings.form')->with('error', 'Failed to submit booking: ' . $e->getMessage())->withFragment('booking-failed-' . ($booking->id ?? 'no-id'));
        // }
    }